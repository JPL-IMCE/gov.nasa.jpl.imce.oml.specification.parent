/**
 * 
 * Copyright 2016 California Institute of Technology ("Caltech").
 * U.S. Government sponsorship acknowledged.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package jpl.imce.oml.specification.ecore.provider;

import java.util.ArrayList;
import java.util.Collection;

import jpl.imce.oml.specification.ecore.util.EcoreAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EcoreItemProviderAdapterFactory extends EcoreAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EcoreItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.AnnotationProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationPropertyItemProvider annotationPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.AnnotationProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationPropertyAdapter() {
		if (annotationPropertyItemProvider == null) {
			annotationPropertyItemProvider = new AnnotationPropertyItemProvider(this);
		}

		return annotationPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationPropertyTableItemProvider annotationPropertyTableItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationPropertyTableAdapter() {
		if (annotationPropertyTableItemProvider == null) {
			annotationPropertyTableItemProvider = new AnnotationPropertyTableItemProvider(this);
		}

		return annotationPropertyTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.AnnotationEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationEntryItemProvider annotationEntryItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.AnnotationEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationEntryAdapter() {
		if (annotationEntryItemProvider == null) {
			annotationEntryItemProvider = new AnnotationEntryItemProvider(this);
		}

		return annotationEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationSubjectTableItemProvider annotationSubjectTableItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationSubjectTableAdapter() {
		if (annotationSubjectTableItemProvider == null) {
			annotationSubjectTableItemProvider = new AnnotationSubjectTableItemProvider(this);
		}

		return annotationSubjectTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.AnnotationSubjectPropertyValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationSubjectPropertyValueItemProvider annotationSubjectPropertyValueItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.AnnotationSubjectPropertyValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationSubjectPropertyValueAdapter() {
		if (annotationSubjectPropertyValueItemProvider == null) {
			annotationSubjectPropertyValueItemProvider = new AnnotationSubjectPropertyValueItemProvider(this);
		}

		return annotationSubjectPropertyValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.Annotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationItemProvider annotationItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.Annotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationAdapter() {
		if (annotationItemProvider == null) {
			annotationItemProvider = new AnnotationItemProvider(this);
		}

		return annotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.TerminologyExtent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminologyExtentItemProvider terminologyExtentItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.TerminologyExtent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminologyExtentAdapter() {
		if (terminologyExtentItemProvider == null) {
			terminologyExtentItemProvider = new TerminologyExtentItemProvider(this);
		}

		return terminologyExtentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.Bundle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BundleItemProvider bundleItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.Bundle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBundleAdapter() {
		if (bundleItemProvider == null) {
			bundleItemProvider = new BundleItemProvider(this);
		}

		return bundleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.TerminologyGraph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminologyGraphItemProvider terminologyGraphItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.TerminologyGraph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminologyGraphAdapter() {
		if (terminologyGraphItemProvider == null) {
			terminologyGraphItemProvider = new TerminologyGraphItemProvider(this);
		}

		return terminologyGraphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.Aspect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AspectItemProvider aspectItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.Aspect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAspectAdapter() {
		if (aspectItemProvider == null) {
			aspectItemProvider = new AspectItemProvider(this);
		}

		return aspectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.Concept} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptItemProvider conceptItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.Concept}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptAdapter() {
		if (conceptItemProvider == null) {
			conceptItemProvider = new ConceptItemProvider(this);
		}

		return conceptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ReifiedRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReifiedRelationshipItemProvider reifiedRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ReifiedRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReifiedRelationshipAdapter() {
		if (reifiedRelationshipItemProvider == null) {
			reifiedRelationshipItemProvider = new ReifiedRelationshipItemProvider(this);
		}

		return reifiedRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.UnreifiedRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnreifiedRelationshipItemProvider unreifiedRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.UnreifiedRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnreifiedRelationshipAdapter() {
		if (unreifiedRelationshipItemProvider == null) {
			unreifiedRelationshipItemProvider = new UnreifiedRelationshipItemProvider(this);
		}

		return unreifiedRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.Scalar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalarItemProvider scalarItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.Scalar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalarAdapter() {
		if (scalarItemProvider == null) {
			scalarItemProvider = new ScalarItemProvider(this);
		}

		return scalarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.EntityStructuredDataProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityStructuredDataPropertyItemProvider entityStructuredDataPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.EntityStructuredDataProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityStructuredDataPropertyAdapter() {
		if (entityStructuredDataPropertyItemProvider == null) {
			entityStructuredDataPropertyItemProvider = new EntityStructuredDataPropertyItemProvider(this);
		}

		return entityStructuredDataPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.EntityScalarDataProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityScalarDataPropertyItemProvider entityScalarDataPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.EntityScalarDataProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityScalarDataPropertyAdapter() {
		if (entityScalarDataPropertyItemProvider == null) {
			entityScalarDataPropertyItemProvider = new EntityScalarDataPropertyItemProvider(this);
		}

		return entityScalarDataPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.StructuredDataProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuredDataPropertyItemProvider structuredDataPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.StructuredDataProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuredDataPropertyAdapter() {
		if (structuredDataPropertyItemProvider == null) {
			structuredDataPropertyItemProvider = new StructuredDataPropertyItemProvider(this);
		}

		return structuredDataPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ScalarDataProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalarDataPropertyItemProvider scalarDataPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ScalarDataProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalarDataPropertyAdapter() {
		if (scalarDataPropertyItemProvider == null) {
			scalarDataPropertyItemProvider = new ScalarDataPropertyItemProvider(this);
		}

		return scalarDataPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.Structure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureItemProvider structureItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.Structure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureAdapter() {
		if (structureItemProvider == null) {
			structureItemProvider = new StructureItemProvider(this);
		}

		return structureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.SpecificDisjointConceptAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificDisjointConceptAxiomItemProvider specificDisjointConceptAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.SpecificDisjointConceptAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificDisjointConceptAxiomAdapter() {
		if (specificDisjointConceptAxiomItemProvider == null) {
			specificDisjointConceptAxiomItemProvider = new SpecificDisjointConceptAxiomItemProvider(this);
		}

		return specificDisjointConceptAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.AnonymousConceptTaxonomyAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnonymousConceptTaxonomyAxiomItemProvider anonymousConceptTaxonomyAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.AnonymousConceptTaxonomyAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnonymousConceptTaxonomyAxiomAdapter() {
		if (anonymousConceptTaxonomyAxiomItemProvider == null) {
			anonymousConceptTaxonomyAxiomItemProvider = new AnonymousConceptTaxonomyAxiomItemProvider(this);
		}

		return anonymousConceptTaxonomyAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.RootConceptTaxonomyAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RootConceptTaxonomyAxiomItemProvider rootConceptTaxonomyAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.RootConceptTaxonomyAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRootConceptTaxonomyAxiomAdapter() {
		if (rootConceptTaxonomyAxiomItemProvider == null) {
			rootConceptTaxonomyAxiomItemProvider = new RootConceptTaxonomyAxiomItemProvider(this);
		}

		return rootConceptTaxonomyAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.BundledTerminologyAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BundledTerminologyAxiomItemProvider bundledTerminologyAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.BundledTerminologyAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBundledTerminologyAxiomAdapter() {
		if (bundledTerminologyAxiomItemProvider == null) {
			bundledTerminologyAxiomItemProvider = new BundledTerminologyAxiomItemProvider(this);
		}

		return bundledTerminologyAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ConceptDesignationTerminologyAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptDesignationTerminologyAxiomItemProvider conceptDesignationTerminologyAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ConceptDesignationTerminologyAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptDesignationTerminologyAxiomAdapter() {
		if (conceptDesignationTerminologyAxiomItemProvider == null) {
			conceptDesignationTerminologyAxiomItemProvider = new ConceptDesignationTerminologyAxiomItemProvider(this);
		}

		return conceptDesignationTerminologyAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.TerminologyExtensionAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminologyExtensionAxiomItemProvider terminologyExtensionAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.TerminologyExtensionAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminologyExtensionAxiomAdapter() {
		if (terminologyExtensionAxiomItemProvider == null) {
			terminologyExtensionAxiomItemProvider = new TerminologyExtensionAxiomItemProvider(this);
		}

		return terminologyExtensionAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.TerminologyNestingAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminologyNestingAxiomItemProvider terminologyNestingAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.TerminologyNestingAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTerminologyNestingAxiomAdapter() {
		if (terminologyNestingAxiomItemProvider == null) {
			terminologyNestingAxiomItemProvider = new TerminologyNestingAxiomItemProvider(this);
		}

		return terminologyNestingAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.EntityExistentialRestrictionAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityExistentialRestrictionAxiomItemProvider entityExistentialRestrictionAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.EntityExistentialRestrictionAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityExistentialRestrictionAxiomAdapter() {
		if (entityExistentialRestrictionAxiomItemProvider == null) {
			entityExistentialRestrictionAxiomItemProvider = new EntityExistentialRestrictionAxiomItemProvider(this);
		}

		return entityExistentialRestrictionAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.EntityUniversalRestrictionAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityUniversalRestrictionAxiomItemProvider entityUniversalRestrictionAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.EntityUniversalRestrictionAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityUniversalRestrictionAxiomAdapter() {
		if (entityUniversalRestrictionAxiomItemProvider == null) {
			entityUniversalRestrictionAxiomItemProvider = new EntityUniversalRestrictionAxiomItemProvider(this);
		}

		return entityUniversalRestrictionAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.AspectSpecializationAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AspectSpecializationAxiomItemProvider aspectSpecializationAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.AspectSpecializationAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAspectSpecializationAxiomAdapter() {
		if (aspectSpecializationAxiomItemProvider == null) {
			aspectSpecializationAxiomItemProvider = new AspectSpecializationAxiomItemProvider(this);
		}

		return aspectSpecializationAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ConceptSpecializationAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptSpecializationAxiomItemProvider conceptSpecializationAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ConceptSpecializationAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptSpecializationAxiomAdapter() {
		if (conceptSpecializationAxiomItemProvider == null) {
			conceptSpecializationAxiomItemProvider = new ConceptSpecializationAxiomItemProvider(this);
		}

		return conceptSpecializationAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ReifiedRelationshipSpecializationAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReifiedRelationshipSpecializationAxiomItemProvider reifiedRelationshipSpecializationAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ReifiedRelationshipSpecializationAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReifiedRelationshipSpecializationAxiomAdapter() {
		if (reifiedRelationshipSpecializationAxiomItemProvider == null) {
			reifiedRelationshipSpecializationAxiomItemProvider = new ReifiedRelationshipSpecializationAxiomItemProvider(this);
		}

		return reifiedRelationshipSpecializationAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.EntityScalarDataPropertyExistentialRestrictionAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityScalarDataPropertyExistentialRestrictionAxiomItemProvider entityScalarDataPropertyExistentialRestrictionAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.EntityScalarDataPropertyExistentialRestrictionAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityScalarDataPropertyExistentialRestrictionAxiomAdapter() {
		if (entityScalarDataPropertyExistentialRestrictionAxiomItemProvider == null) {
			entityScalarDataPropertyExistentialRestrictionAxiomItemProvider = new EntityScalarDataPropertyExistentialRestrictionAxiomItemProvider(this);
		}

		return entityScalarDataPropertyExistentialRestrictionAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.EntityScalarDataPropertyUniversalRestrictionAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityScalarDataPropertyUniversalRestrictionAxiomItemProvider entityScalarDataPropertyUniversalRestrictionAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.EntityScalarDataPropertyUniversalRestrictionAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityScalarDataPropertyUniversalRestrictionAxiomAdapter() {
		if (entityScalarDataPropertyUniversalRestrictionAxiomItemProvider == null) {
			entityScalarDataPropertyUniversalRestrictionAxiomItemProvider = new EntityScalarDataPropertyUniversalRestrictionAxiomItemProvider(this);
		}

		return entityScalarDataPropertyUniversalRestrictionAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.EntityScalarDataPropertyParticularRestrictionAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityScalarDataPropertyParticularRestrictionAxiomItemProvider entityScalarDataPropertyParticularRestrictionAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.EntityScalarDataPropertyParticularRestrictionAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityScalarDataPropertyParticularRestrictionAxiomAdapter() {
		if (entityScalarDataPropertyParticularRestrictionAxiomItemProvider == null) {
			entityScalarDataPropertyParticularRestrictionAxiomItemProvider = new EntityScalarDataPropertyParticularRestrictionAxiomItemProvider(this);
		}

		return entityScalarDataPropertyParticularRestrictionAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.BinaryScalarRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryScalarRestrictionItemProvider binaryScalarRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.BinaryScalarRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryScalarRestrictionAdapter() {
		if (binaryScalarRestrictionItemProvider == null) {
			binaryScalarRestrictionItemProvider = new BinaryScalarRestrictionItemProvider(this);
		}

		return binaryScalarRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.IRIScalarRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IRIScalarRestrictionItemProvider iriScalarRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.IRIScalarRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIRIScalarRestrictionAdapter() {
		if (iriScalarRestrictionItemProvider == null) {
			iriScalarRestrictionItemProvider = new IRIScalarRestrictionItemProvider(this);
		}

		return iriScalarRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.NumericScalarRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericScalarRestrictionItemProvider numericScalarRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.NumericScalarRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericScalarRestrictionAdapter() {
		if (numericScalarRestrictionItemProvider == null) {
			numericScalarRestrictionItemProvider = new NumericScalarRestrictionItemProvider(this);
		}

		return numericScalarRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.PlainLiteralScalarRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlainLiteralScalarRestrictionItemProvider plainLiteralScalarRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.PlainLiteralScalarRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlainLiteralScalarRestrictionAdapter() {
		if (plainLiteralScalarRestrictionItemProvider == null) {
			plainLiteralScalarRestrictionItemProvider = new PlainLiteralScalarRestrictionItemProvider(this);
		}

		return plainLiteralScalarRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.StringScalarRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringScalarRestrictionItemProvider stringScalarRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.StringScalarRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringScalarRestrictionAdapter() {
		if (stringScalarRestrictionItemProvider == null) {
			stringScalarRestrictionItemProvider = new StringScalarRestrictionItemProvider(this);
		}

		return stringScalarRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.TimeScalarRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeScalarRestrictionItemProvider timeScalarRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.TimeScalarRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeScalarRestrictionAdapter() {
		if (timeScalarRestrictionItemProvider == null) {
			timeScalarRestrictionItemProvider = new TimeScalarRestrictionItemProvider(this);
		}

		return timeScalarRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.SynonymScalarRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynonymScalarRestrictionItemProvider synonymScalarRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.SynonymScalarRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynonymScalarRestrictionAdapter() {
		if (synonymScalarRestrictionItemProvider == null) {
			synonymScalarRestrictionItemProvider = new SynonymScalarRestrictionItemProvider(this);
		}

		return synonymScalarRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ScalarOneOfRestriction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalarOneOfRestrictionItemProvider scalarOneOfRestrictionItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ScalarOneOfRestriction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalarOneOfRestrictionAdapter() {
		if (scalarOneOfRestrictionItemProvider == null) {
			scalarOneOfRestrictionItemProvider = new ScalarOneOfRestrictionItemProvider(this);
		}

		return scalarOneOfRestrictionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ScalarOneOfLiteralAxiom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalarOneOfLiteralAxiomItemProvider scalarOneOfLiteralAxiomItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ScalarOneOfLiteralAxiom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalarOneOfLiteralAxiomAdapter() {
		if (scalarOneOfLiteralAxiomItemProvider == null) {
			scalarOneOfLiteralAxiomItemProvider = new ScalarOneOfLiteralAxiomItemProvider(this);
		}

		return scalarOneOfLiteralAxiomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.DescriptionBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptionBoxItemProvider descriptionBoxItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.DescriptionBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptionBoxAdapter() {
		if (descriptionBoxItemProvider == null) {
			descriptionBoxItemProvider = new DescriptionBoxItemProvider(this);
		}

		return descriptionBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.DescriptionBoxExtendsClosedWorldDefinitions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptionBoxExtendsClosedWorldDefinitionsItemProvider descriptionBoxExtendsClosedWorldDefinitionsItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.DescriptionBoxExtendsClosedWorldDefinitions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptionBoxExtendsClosedWorldDefinitionsAdapter() {
		if (descriptionBoxExtendsClosedWorldDefinitionsItemProvider == null) {
			descriptionBoxExtendsClosedWorldDefinitionsItemProvider = new DescriptionBoxExtendsClosedWorldDefinitionsItemProvider(this);
		}

		return descriptionBoxExtendsClosedWorldDefinitionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.DescriptionBoxRefinement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptionBoxRefinementItemProvider descriptionBoxRefinementItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.DescriptionBoxRefinement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptionBoxRefinementAdapter() {
		if (descriptionBoxRefinementItemProvider == null) {
			descriptionBoxRefinementItemProvider = new DescriptionBoxRefinementItemProvider(this);
		}

		return descriptionBoxRefinementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ScalarDataPropertyValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalarDataPropertyValueItemProvider scalarDataPropertyValueItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ScalarDataPropertyValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalarDataPropertyValueAdapter() {
		if (scalarDataPropertyValueItemProvider == null) {
			scalarDataPropertyValueItemProvider = new ScalarDataPropertyValueItemProvider(this);
		}

		return scalarDataPropertyValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.StructuredDataPropertyValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuredDataPropertyValueItemProvider structuredDataPropertyValueItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.StructuredDataPropertyValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuredDataPropertyValueAdapter() {
		if (structuredDataPropertyValueItemProvider == null) {
			structuredDataPropertyValueItemProvider = new StructuredDataPropertyValueItemProvider(this);
		}

		return structuredDataPropertyValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.DataStructureTuple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataStructureTupleItemProvider dataStructureTupleItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.DataStructureTuple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataStructureTupleAdapter() {
		if (dataStructureTupleItemProvider == null) {
			dataStructureTupleItemProvider = new DataStructureTupleItemProvider(this);
		}

		return dataStructureTupleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ConceptInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConceptInstanceItemProvider conceptInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ConceptInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConceptInstanceAdapter() {
		if (conceptInstanceItemProvider == null) {
			conceptInstanceItemProvider = new ConceptInstanceItemProvider(this);
		}

		return conceptInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ReifiedRelationshipInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReifiedRelationshipInstanceItemProvider reifiedRelationshipInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ReifiedRelationshipInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReifiedRelationshipInstanceAdapter() {
		if (reifiedRelationshipInstanceItemProvider == null) {
			reifiedRelationshipInstanceItemProvider = new ReifiedRelationshipInstanceItemProvider(this);
		}

		return reifiedRelationshipInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ReifiedRelationshipInstanceDomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReifiedRelationshipInstanceDomainItemProvider reifiedRelationshipInstanceDomainItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ReifiedRelationshipInstanceDomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReifiedRelationshipInstanceDomainAdapter() {
		if (reifiedRelationshipInstanceDomainItemProvider == null) {
			reifiedRelationshipInstanceDomainItemProvider = new ReifiedRelationshipInstanceDomainItemProvider(this);
		}

		return reifiedRelationshipInstanceDomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.ReifiedRelationshipInstanceRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReifiedRelationshipInstanceRangeItemProvider reifiedRelationshipInstanceRangeItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.ReifiedRelationshipInstanceRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReifiedRelationshipInstanceRangeAdapter() {
		if (reifiedRelationshipInstanceRangeItemProvider == null) {
			reifiedRelationshipInstanceRangeItemProvider = new ReifiedRelationshipInstanceRangeItemProvider(this);
		}

		return reifiedRelationshipInstanceRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jpl.imce.oml.specification.ecore.UnreifiedRelationshipInstanceTuple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnreifiedRelationshipInstanceTupleItemProvider unreifiedRelationshipInstanceTupleItemProvider;

	/**
	 * This creates an adapter for a {@link jpl.imce.oml.specification.ecore.UnreifiedRelationshipInstanceTuple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnreifiedRelationshipInstanceTupleAdapter() {
		if (unreifiedRelationshipInstanceTupleItemProvider == null) {
			unreifiedRelationshipInstanceTupleItemProvider = new UnreifiedRelationshipInstanceTupleItemProvider(this);
		}

		return unreifiedRelationshipInstanceTupleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (annotationPropertyItemProvider != null) annotationPropertyItemProvider.dispose();
		if (annotationPropertyTableItemProvider != null) annotationPropertyTableItemProvider.dispose();
		if (annotationEntryItemProvider != null) annotationEntryItemProvider.dispose();
		if (annotationSubjectTableItemProvider != null) annotationSubjectTableItemProvider.dispose();
		if (annotationSubjectPropertyValueItemProvider != null) annotationSubjectPropertyValueItemProvider.dispose();
		if (annotationItemProvider != null) annotationItemProvider.dispose();
		if (terminologyExtentItemProvider != null) terminologyExtentItemProvider.dispose();
		if (bundleItemProvider != null) bundleItemProvider.dispose();
		if (terminologyGraphItemProvider != null) terminologyGraphItemProvider.dispose();
		if (aspectItemProvider != null) aspectItemProvider.dispose();
		if (conceptItemProvider != null) conceptItemProvider.dispose();
		if (reifiedRelationshipItemProvider != null) reifiedRelationshipItemProvider.dispose();
		if (unreifiedRelationshipItemProvider != null) unreifiedRelationshipItemProvider.dispose();
		if (scalarItemProvider != null) scalarItemProvider.dispose();
		if (entityStructuredDataPropertyItemProvider != null) entityStructuredDataPropertyItemProvider.dispose();
		if (entityScalarDataPropertyItemProvider != null) entityScalarDataPropertyItemProvider.dispose();
		if (structuredDataPropertyItemProvider != null) structuredDataPropertyItemProvider.dispose();
		if (scalarDataPropertyItemProvider != null) scalarDataPropertyItemProvider.dispose();
		if (structureItemProvider != null) structureItemProvider.dispose();
		if (specificDisjointConceptAxiomItemProvider != null) specificDisjointConceptAxiomItemProvider.dispose();
		if (anonymousConceptTaxonomyAxiomItemProvider != null) anonymousConceptTaxonomyAxiomItemProvider.dispose();
		if (rootConceptTaxonomyAxiomItemProvider != null) rootConceptTaxonomyAxiomItemProvider.dispose();
		if (bundledTerminologyAxiomItemProvider != null) bundledTerminologyAxiomItemProvider.dispose();
		if (conceptDesignationTerminologyAxiomItemProvider != null) conceptDesignationTerminologyAxiomItemProvider.dispose();
		if (terminologyExtensionAxiomItemProvider != null) terminologyExtensionAxiomItemProvider.dispose();
		if (terminologyNestingAxiomItemProvider != null) terminologyNestingAxiomItemProvider.dispose();
		if (entityExistentialRestrictionAxiomItemProvider != null) entityExistentialRestrictionAxiomItemProvider.dispose();
		if (entityUniversalRestrictionAxiomItemProvider != null) entityUniversalRestrictionAxiomItemProvider.dispose();
		if (aspectSpecializationAxiomItemProvider != null) aspectSpecializationAxiomItemProvider.dispose();
		if (conceptSpecializationAxiomItemProvider != null) conceptSpecializationAxiomItemProvider.dispose();
		if (reifiedRelationshipSpecializationAxiomItemProvider != null) reifiedRelationshipSpecializationAxiomItemProvider.dispose();
		if (entityScalarDataPropertyExistentialRestrictionAxiomItemProvider != null) entityScalarDataPropertyExistentialRestrictionAxiomItemProvider.dispose();
		if (entityScalarDataPropertyUniversalRestrictionAxiomItemProvider != null) entityScalarDataPropertyUniversalRestrictionAxiomItemProvider.dispose();
		if (entityScalarDataPropertyParticularRestrictionAxiomItemProvider != null) entityScalarDataPropertyParticularRestrictionAxiomItemProvider.dispose();
		if (binaryScalarRestrictionItemProvider != null) binaryScalarRestrictionItemProvider.dispose();
		if (iriScalarRestrictionItemProvider != null) iriScalarRestrictionItemProvider.dispose();
		if (numericScalarRestrictionItemProvider != null) numericScalarRestrictionItemProvider.dispose();
		if (plainLiteralScalarRestrictionItemProvider != null) plainLiteralScalarRestrictionItemProvider.dispose();
		if (stringScalarRestrictionItemProvider != null) stringScalarRestrictionItemProvider.dispose();
		if (timeScalarRestrictionItemProvider != null) timeScalarRestrictionItemProvider.dispose();
		if (synonymScalarRestrictionItemProvider != null) synonymScalarRestrictionItemProvider.dispose();
		if (scalarOneOfRestrictionItemProvider != null) scalarOneOfRestrictionItemProvider.dispose();
		if (scalarOneOfLiteralAxiomItemProvider != null) scalarOneOfLiteralAxiomItemProvider.dispose();
		if (descriptionBoxItemProvider != null) descriptionBoxItemProvider.dispose();
		if (descriptionBoxExtendsClosedWorldDefinitionsItemProvider != null) descriptionBoxExtendsClosedWorldDefinitionsItemProvider.dispose();
		if (descriptionBoxRefinementItemProvider != null) descriptionBoxRefinementItemProvider.dispose();
		if (scalarDataPropertyValueItemProvider != null) scalarDataPropertyValueItemProvider.dispose();
		if (structuredDataPropertyValueItemProvider != null) structuredDataPropertyValueItemProvider.dispose();
		if (dataStructureTupleItemProvider != null) dataStructureTupleItemProvider.dispose();
		if (conceptInstanceItemProvider != null) conceptInstanceItemProvider.dispose();
		if (reifiedRelationshipInstanceItemProvider != null) reifiedRelationshipInstanceItemProvider.dispose();
		if (reifiedRelationshipInstanceDomainItemProvider != null) reifiedRelationshipInstanceDomainItemProvider.dispose();
		if (reifiedRelationshipInstanceRangeItemProvider != null) reifiedRelationshipInstanceRangeItemProvider.dispose();
		if (unreifiedRelationshipInstanceTupleItemProvider != null) unreifiedRelationshipInstanceTupleItemProvider.dispose();
	}

}
