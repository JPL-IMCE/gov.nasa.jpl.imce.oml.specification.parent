import groovy.util.XmlParser
import groovy.util.XmlSlurper
import groovy.util.slurpersupport.GPathResult

apply plugin: eclipsebuild.UpdateSitePlugin
apply plugin: 'org.hidetake.ssh'
apply plugin: 'com.jfrog.bintray'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.2'
    }
}

def repositoryDir = new File(project.buildDir, 'repository')

def m2SettingsFile = new File(System.getenv("HOME") + "/.m2/settings.xml")
def mavenSettings = (m2SettingsFile.exists()) ? new XmlSlurper().parse(m2SettingsFile) : null

// delay evaluating mavenSettings until it is certain that it isn't null.

def bintrayUser = getBintrayUser(mavenSettings)
assert null != bintrayUser && "" != bintrayUser

def bintrayApiKey = getBintrayApiKey(mavenSettings)
assert null != bintrayApiKey && "" != bintrayApiKey

bintray {
	user = bintrayUser
	key = bintrayApiKey
	
	filesSpec {
		from repositoryDir
		into '.'
	}
	
	dryRun = "1" == (project.hasProperty('bintray.dryRun') ? project.property('bintray.dryRun') : System.getenv("BINTRAY_DRYRUN"))
	
	publish = "1" == (project.hasProperty('bintray.publish') ? project.property('bintray.publish') : System.getenv("BINTRAY_PUBLISH"))
	
	override = "1" == (project.hasProperty('bintray.override') ? project.property('bintray.override') : System.getenv("BINTRAY_OVERRIDE"))
	
	pkg {
		repo = 'gov.nasa.jpl.imce.p2'
		name = 'jpl.imce.oml.specification.p2'
		userOrg = 'jpl-imce'
		licenses = ['Apache-2.0']
		vcsUrl = 'https://github.com/JPL-IMCE/jpl.imce.oml.specification.parent.git'
		
		version {
			name = rootProject.version
		}
	}
}

updateSite {
    extraResources = files('p2.index')
}

dependencies {
    localPlugin project(':jpl.imce.oml.specification.ecore')
    localPlugin project(':jpl.imce.oml.specification')
    localPlugin project(':jpl.imce.oml.specification.ecore.edit')
    localPlugin project(':jpl.imce.oml.specification.ecore.editor')
    localPlugin project(':jpl.imce.oml.specification.ide')
    localPlugin project(':jpl.imce.oml.specification.ui')
    localPlugin project(':jpl.imce.oml.specification.web')
    localPlugin project(':jpl.imce.oml.specification.tests')
    localPlugin project(':jpl.imce.oml.specification.ui.tests')
    localFeature project(':jpl.imce.oml.specification.feature')

    // include 3rd party dependencies in the update site
    externalPlugin withEclipseBundle('com.gradleware.tooling.model')

    // official 3rd party dependencies from Orbit which are already signed and normalized with pack200
    signedExternalPlugin withEclipseBundle('org.slf4j.api')
    signedExternalPlugin withEclipseBundle('com.google.gson')
    signedExternalPlugin withEclipseBundle('com.google.guava')
}

bintrayUpload.dependsOn(createP2Repository)
	
def String getBintrayUser(GPathResult mavenSettings) {
	if (null == mavenSettings)
		System.getenv("BINTRAY_USER")
	else {
		def GPathResult found =
		mavenSettings.'**'.find { node ->
			node.name() == 'bintray.user'
		}
		
		if (null == found)
			System.getenv("BINTRAY_USER")
		else
			found.text()
	}
}

def String getBintrayApiKey(GPathResult mavenSettings) {
	if (null == mavenSettings)
		System.getenv("BINTRAY_APIKEY")
	else {
		def GPathResult found =
		mavenSettings.'**'.find { node ->
			node.name() == 'bintray.apikey'
		}
		
		if (null == found)
			System.getenv("BINTRAY_APIKEY")
		else
			found.text()
	}	
}