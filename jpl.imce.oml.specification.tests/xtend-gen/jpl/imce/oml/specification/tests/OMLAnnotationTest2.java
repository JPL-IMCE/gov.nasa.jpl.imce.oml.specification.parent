/**
 * generated by Xtext 2.10.0
 */
package jpl.imce.oml.specification.tests;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import java.util.function.Consumer;
import jpl.imce.oml.specification.ecore.Annotation;
import jpl.imce.oml.specification.ecore.AnnotationProperty;
import jpl.imce.oml.specification.ecore.Concept;
import jpl.imce.oml.specification.ecore.TerminologyBoxStatement;
import jpl.imce.oml.specification.ecore.TerminologyExtent;
import jpl.imce.oml.specification.ecore.TerminologyGraph;
import jpl.imce.oml.specification.ecore.TerminologyThing;
import jpl.imce.oml.specification.tests.OntologicalModelingLanguageInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(OntologicalModelingLanguageInjectorProvider.class)
@SuppressWarnings("all")
public class OMLAnnotationTest2 {
  @Inject
  private ParseHelper<TerminologyExtent> parseHelper;
  
  @Test
  public void test() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("annotationProperty rdfs:label=<http://www.w3.org/2000/01/rdf-schema#label>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("open terminology <http://imce.jpl.nasa.gov/foundation/mission/mission>");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("abstract concept PerformingElement");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@rdfs:label = \"Performing Element\"");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@rdfs:label = \"A performing element\"");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final TerminologyExtent result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      Resource _eResource = result.eResource();
      final EList<Resource.Diagnostic> errors = _eResource.getErrors();
      boolean _isEmpty = errors.isEmpty();
      Assert.assertTrue(_isEmpty);
      final Resource r = result.eResource();
      EcoreUtil.resolveAll(r);
      EList<AnnotationProperty> _annotationProperties = result.getAnnotationProperties();
      final AnnotationProperty ap = IterableExtensions.<AnnotationProperty>head(_annotationProperties);
      EList<TerminologyGraph> _terminologyGraphs = result.getTerminologyGraphs();
      final TerminologyGraph tbox = IterableExtensions.<TerminologyGraph>head(_terminologyGraphs);
      String _nsPrefix = tbox.nsPrefix();
      Assert.assertEquals(_nsPrefix, "mission");
      EList<TerminologyBoxStatement> _boxStatements = tbox.getBoxStatements();
      Iterable<Concept> _filter = Iterables.<Concept>filter(_boxStatements, Concept.class);
      final Concept c = IterableExtensions.<Concept>head(_filter);
      String _name = c.name();
      Assert.assertEquals(_name, "PerformingElement");
      final EList<Annotation> ann = tbox.getAnnotations();
      int _size = ann.size();
      Assert.assertEquals(2, _size);
      final Consumer<Annotation> _function = new Consumer<Annotation>() {
        public void accept(final Annotation a) {
          final AnnotationProperty a_prop = a.getProperty();
          final TerminologyThing a_subj = a.getSubject();
          final String a_value = a.getValue();
          Assert.assertTrue((a_value.equals("Performing Element") || a_value.equals("A performing element")));
          Assert.assertSame(ap, a_prop);
          Assert.assertSame(c, a_subj);
        }
      };
      ann.forEach(_function);
      Class<? extends OMLAnnotationTest2> _class = this.getClass();
      String _name_1 = _class.getName();
      String _plus = (_name_1 + " OK!");
      System.out.println(_plus);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
