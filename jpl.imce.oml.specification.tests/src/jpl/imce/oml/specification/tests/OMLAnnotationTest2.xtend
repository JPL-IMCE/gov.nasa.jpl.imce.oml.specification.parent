/*
 * generated by Xtext 2.10.0
 */
package jpl.imce.oml.specification.tests

import com.google.inject.Inject
import jpl.imce.oml.specification.ecore.Concept
import jpl.imce.oml.specification.ecore.TerminologyExtent
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*
import org.eclipse.emf.ecore.util.EcoreUtil

@RunWith(XtextRunner)
@InjectWith(OntologicalModelingLanguageInjectorProvider)
class OMLAnnotationTest2 {

	@Inject
	ParseHelper<TerminologyExtent> parseHelper

	@Test 
	def void test() {
		
		val result = parseHelper.parse(
'''
annotationProperty rdfs:label=<http://www.w3.org/2000/01/rdf-schema#label>

open terminology <http://imce.jpl.nasa.gov/foundation/mission/mission>
{
	abstract concept PerformingElement
	@rdfs:label = "Performing Element"
	@rdfs:label = "A performing element"
}
''')
		assertNotNull(result)
		val errors = result.eResource.errors
		assertTrue(errors.empty)
		
		val r = result.eResource
		EcoreUtil.resolveAll(r)
		
		val ap = result.annotationProperties.head
		
		val tbox = result.terminologyGraphs.head
		tbox.nsPrefix.assertEquals("mission")
		
		val c = tbox.boxStatements.filter(Concept).head
		c.name().assertEquals("PerformingElement")
		
		val ann = tbox.annotations
		assertEquals(2, ann.size)
		ann.forEach[a |
			
			val a_prop = a.property
			val a_subj = a.subject
			val a_value = a.value
		
			assertTrue(a_value.equals("Performing Element") || a_value.equals("A performing element"))
			ap.assertSame(a_prop)
			c.assertSame(a_subj)
		]
		
		
		System.out.println(this.class.name + " OK!")
	}

}
